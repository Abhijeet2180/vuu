@top Filter { Expression }

Expression { OrExpression AsClause?}

OrExpression { AndExpression (Or AndExpression)* }

AndExpression { FilterClause ( And FilterClause )* }

AsClause { As Identifier }

FilterClause { ColumnValueExpression | ColumnSetExpression }

ColumnValueExpression { Column Operator Value }

ColumnSetExpression { Column In LBrack Values RBrack }

NumericColumn { "~"+ }

StringColumn { "$"+ }

Column { Identifier }

Operator { Eq | NotEq | Gt | Lt | Contains | Starts | Ends }

Values { Value (Comma Value)* }

Value { Identifier | Int | String }

String { Quote Identifier Quote }

@skip { space  }

@tokens {
  Contains { "contains" }
  Starts { "starts" }
  Ends { "ends" }
  And { "and" }
  Or { "or" }
  As { "as" }
  In { "in" }
  Eq { "=" }
  NotEq { "!=" }
  Gt { ">" }
  Lt { "<" }
  Quote { "\""}
  Comma { "," }
  LBrack { "[" }
  RBrack { "]" }
  Identifier { $[a-zA-Z_]$[a-zA-Z_0-9]* }
  Int { std.digit+ }
  // String { '"' (!["\\] | "\\" _)* '"' }
  space { $[ \t\n\r]+ }
}
